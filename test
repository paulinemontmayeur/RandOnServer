// include the GSM library
#include <GSM.h>

// PIN Number for the SIM
#define PINNUMBER ""

// initialize the library instances
GSM gsmAccess;
GSM_SMS sms;

const int potPin=0;
const int ledPin=7;
int cumul=0;
int mesure_brute=0;

// Array to hold the number a SMS is retreived from
char senderNumber[20];

void setup()
{
  // initialize serial communications and wait for port to open:
  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for Leonardo only
  }

  Serial.println("SMS Messages Receiver");

  // connection state
  boolean notConnected = true;

  // Start GSM connection
  while(notConnected)
  {
    if(gsmAccess.begin(PINNUMBER)==GSM_READY)
      notConnected = false;
    else
    {
      Serial.println("Not connected");
      delay(1000);
    }
  }

  Serial.println("GSM initialized");
  Serial.println("Waiting for messages");

  pinMode(ledPin, OUTPUT);
}

void loop()
{

  char c;

  // If there are any SMSs available()
  if (sms.available())
  {
    Serial.println("Message received from:");

    // Get remote number
    sms.remoteNumber(senderNumber, 20);
    Serial.println(senderNumber);

    // An example of message disposal
    // Any messages starting with # should be discarded
    if(sms.peek()=='#')
    {
      Serial.println("Discarded SMS");
      sms.flush();
    }

    // Read message bytes and print them
    while(c=sms.read())
      Serial.print(c);

    Serial.println("\nEND OF MESSAGE");

  }

    mesure_brute = analogRead(potPin);
    cumul = cumul + mesure_brute;

    Serial.println("cumul = " + cumul);

    if(cumul >= atoi(c)) {
      digitalWrite(ledPin, HIGH);  // Alors on allume la LED
      delay(10000);
      cumul = 0;
    }
    else
      digitalWrite(ledPin, LOW);  // Ou on l'Ã©teint

      // delete message from modem memory
    sms.flush();
    Serial.println("MESSAGE DELETED");

    delay(1000);
}